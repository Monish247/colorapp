pipeline {
    agent any

    environment {
        DOTNET_CLI_HOME = "C:\\Program Files\\dotnet"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE = 'monish247/jenkins_colorapp'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Monish247/colorapp.git'
            }
        }
        stage('installing dependencies') {
            steps {
                script {
                    // Restoring dependencies
                    //bat "cd ${DOTNET_CLI_HOME} && dotnet restore"

                    bat '''
                        cd API-UI\\webapi\\ColorApi
                        cd
                        dir
                        dotnet restore
                    '''    
                }
            }
        }
        stage('build') {
            steps {
                script {
                    // Running tests
                   bat '''
                       dir 
                       cd API-UI\\webapi\\ColorApi
                       dir
                       dotnet build --configuration Release
                       cd .\\bin\\Debug\\net9.0
                       echo "show .dll in curent directory"
                       dir *.dll
                    '''
                }
            }
        }
        stage('Publish') {
            steps {
                script{
                    bat '''
                        echo "checking directory"
                        dir
                        cd API-UI\\webapi\\ColorApi
                        dir
                        mkdir publish
                        dir
                        dotnet publish -c Release --property:PublishDir=./publish
                        dir publish
                    '''
                        archiveArtifacts artifacts: 'publish/**', fingerprint: true
                }
            }   
        }
        stage('Docker Build') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${env.BUILD_ID}", '-f Dockerfile .')
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        docker.image("${DOCKER_IMAGE}:${env.BUILD_ID}").push()
                        docker.image("${DOCKER_IMAGE}:${env.BUILD_ID}").push('latest')
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
